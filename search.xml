<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[每周烧脑-010]]></title>
      <url>http://yoursite.com/2016/09/26/%E6%AF%8F%E5%91%A8%E7%83%A7%E8%84%91-010/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="整数替换"><a href="#整数替换" class="headerlink" title="整数替换"></a>整数替换</h3><p>对一个正整数n可以执行如下操作：</p>
<ol>
<li>如果 n 是偶数，把它替换为 n / 2</li>
<li>如果 n 是奇数，可以把它替换为 n - 1 或 n + 1</li>
</ol>
<p>求最少需要多少步可以把 n 变成 1。</p>
<p>例如：</p>
<p>n = 8， 8-&gt;4-&gt;2-&gt;1，需要3步</p>
<p>n = 7， 7 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1 或 7 -&gt; 6 -&gt; 3 -&gt; 2 -&gt; 1，两种方法都需要4步</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int replace( int n )</div><div class="line">&#123;</div><div class="line">    // 返回把n变成1需要的最少步数</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><pre><code>
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[每周烧脑-009]]></title>
      <url>http://yoursite.com/2016/09/26/%E6%AF%8F%E5%91%A8%E7%83%A7%E8%84%91-009/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="子序列"><a href="#子序列" class="headerlink" title="子序列"></a>子序列</h3><p>两个字符串a，b，判断a是否是b的子序列。</p>
<p>子序列是指a中的每个字符在b中都存在，且a中任意两个字符的先后顺序与它们在b中的先后顺序完全相同，但b中的某些字符可以不在a中出现。<br>如：</p>
<p>   a = “abc”    b = “aabbcc”   true</p>
<p>   a = “aabcc”  b = “aabbcc”  true</p>
<p>   a = “acb”   b = “aabbcc”   false</p>
<p>   a = “abd”   b = “aabbcc”   false</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bool isSubsequence(const char* a, const char* b) &#123;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="最佳答案"><a href="#最佳答案" class="headerlink" title="最佳答案"></a>最佳答案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">bool isSubsequence( char* a, char* b )</div><div class="line">&#123;</div><div class="line">    for( ; *a != 0; ++a, ++b )</div><div class="line">        for( ; *a != *b; ++b )</div><div class="line">            if( *b == 0 )</div><div class="line">                return false;</div><div class="line">    return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line">BOOL isSubsequence(const char * a, const char * b);</div><div class="line">BOOL isSubsequence(const char * a, const char * b)&#123;</div><div class="line">    int j = 0;</div><div class="line">    BOOL flag = YES;</div><div class="line">    for (int i = 0; i &lt; strlen(a); i ++) &#123;</div><div class="line">        for (;j &lt; strlen(b);) &#123;</div><div class="line">            if (a[i]^b[j]) &#123;</div><div class="line">                flag = NO;</div><div class="line">                break;</div><div class="line">            &#125;else&#123;</div><div class="line">                flag = YES;</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return flag;</div><div class="line">&#125;</div><div class="line">int main(int argc, const char * argv[]) &#123;</div><div class="line">    @autoreleasepool &#123;</div><div class="line">        char a[] = &quot;abc&quot;;</div><div class="line">        char b[] = &quot;aabbcc&quot;;</div><div class="line">        printf(&quot;%d&quot;,isSubsequence(a, b));</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[每周烧脑-008]]></title>
      <url>http://yoursite.com/2016/09/26/%E6%AF%8F%E5%91%A8%E7%83%A7%E8%84%91-008/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="计算x的n次方"><a href="#计算x的n次方" class="headerlink" title="计算x的n次方"></a>计算x的n次方</h3><p>n个连续的整数被打乱顺序放在一个数组中，其中有一个是重复的，请用最快的方法找出这个数字</p>
<p>注意：除了效率，还要考虑各种边界条件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">函数原型：</div><div class="line">double myPow( double x, int n )</div><div class="line">&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="最佳答案"><a href="#最佳答案" class="headerlink" title="最佳答案"></a>最佳答案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">## 答案</div></pre></td></tr></table></figure>
<p>```</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[每周烧脑-007]]></title>
      <url>http://yoursite.com/2016/09/26/%E6%AF%8F%E5%91%A8%E7%83%A7%E8%84%91-007/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="有没有环"><a href="#有没有环" class="headerlink" title="有没有环"></a>有没有环</h3><p>给定一个单向链表，判断其中是否有环，即类似下面的形式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">A -&gt; B -&gt; C -&gt; D -&gt; E -&gt; F</div><div class="line">               |         |</div><div class="line">               I &lt;- H &lt;- G</div></pre></td></tr></table></figure>
<p>链表结点定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">struct ListNode</div><div class="line">&#123;</div><div class="line">    ListNode* next;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>函数原型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">bool hasCycle( const ListNode* head )</div><div class="line">&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="最佳答案"><a href="#最佳答案" class="headerlink" title="最佳答案"></a>最佳答案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">## 答案</div></pre></td></tr></table></figure>
<p>#import <foundation foundation.h=""><br>typedef struct listNode{<br>    struct listNode <em>next;<br>}list;<br>bool hasCycle(list</em> head);<br>bool hasCycle(list<em> head)<br>{<br>    list </em>fast = head;<br>    list <em>slow = head;<br>    while (fast &amp;&amp; fast -&gt; next) {<br>        fast = fast -&gt; next -&gt; next;<br>        slow = slow -&gt; next;<br>        if (fast == slow) {<br>            return false;<br>        }<br>    }<br>    return true;<br>};<br>int main(int argc, const char </em> argv[]) {<br>    @autoreleasepool {</foundation></p>
<pre><code>}
return 0;
</code></pre><p>}<br>```</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[每周烧脑-006]]></title>
      <url>http://yoursite.com/2016/09/26/%E6%AF%8F%E5%91%A8%E7%83%A7%E8%84%91-006/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h3><p>给定A,B两个字符串，串中的字符全都是小写英文字母（即a -&gt; z）。判断能否只使用A串中的字符拼出B串，A串中的每个字符只准使用一次。例如：</p>
<p>A = “aaab”    B = “aaa”     true</p>
<p>A = “aabb”    B= “aaa”      false</p>
<p>A = “aaab”    B = “abaa”   true</p>
<p>A = “aaab”    B = “aaac”   false</p>
<p>函数原型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">bool canConstruct(const char* A, const char* B)</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="最佳答案"><a href="#最佳答案" class="headerlink" title="最佳答案"></a>最佳答案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line"></div><div class="line">## 答案</div></pre></td></tr></table></figure>
<p>// 计算每个字母出现的次数，正向加法，逆向加法。小于0证明B比A中同样的字母少<br>BOOL canConstruct(const char <em> A, const char </em> B);<br>BOOL canConstruct(const char <em> A, const char </em> B){</p>
<pre><code>int a[26] = {};
for (int i = 0; i &lt; strlen(A); i ++) {
    a[A[i] - &apos;a&apos;] += 1;
}
for (int j = 0; j &lt; strlen(B); j ++) {
    a[B[j] - &apos;a&apos;] -= 1;
    if (a[B[j] - &apos;a&apos;] &lt; 0) {
        return false;
    }
}
return true;
</code></pre><p>}<br>int main(int argc, const char * argv[]) {<br>    @autoreleasepool {<br>        char a[] = “aaab”;<br>        char b[] = “aaca”;<br>        printf(“%d”,canConstruct(a, b));<br>    }<br>    return 0;<br>}<br>```</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[每周烧脑-005]]></title>
      <url>http://yoursite.com/2016/09/26/%E6%AF%8F%E5%91%A8%E7%83%A7%E8%84%91-005/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="寻找单身狗"><a href="#寻找单身狗" class="headerlink" title="寻找单身狗"></a>寻找单身狗</h3><p>一位单身人士混入了一个只允许情侣参加的聚会，已知每对情侣身上都贴了相同的号码，并且不同情侣的号码互不相同，单身人士身上的号码也是唯一的，找到他/她。</p>
<p>C函数原型：返回只出现一次的号码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int FindSignle( int* numbers, int n )</div><div class="line">&#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>例如：对输入a[1,1,2,9,2,3,3,4,6,6,5,7,5,9,7,8,8]，返回4</p>
<h2 id="最佳答案"><a href="#最佳答案" class="headerlink" title="最佳答案"></a>最佳答案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">int FindSignle(int * numbers, int n)&#123;</div><div class="line">    </div><div class="line">    int r = a[0];</div><div class="line">    for (int i = 1 ; i &lt; n; i ++) &#123;</div><div class="line">        r ^= a[i];</div><div class="line">    &#125;</div><div class="line">    return r;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line">int FindSignle(int * numbers, int n);</div><div class="line">int FindSignle(int * numbers, int n)&#123;</div><div class="line">    </div><div class="line">    int maxNum = 0;</div><div class="line">    int sumNum1 = 0;</div><div class="line">    int sumNum2 = 0;</div><div class="line">    for (int i = 0 ; i &lt; n; i ++) &#123;</div><div class="line">        if (maxNum &lt; numbers[i]) &#123;</div><div class="line">            maxNum = numbers[i];</div><div class="line">            sumNum1 = sumNum1 + maxNum;</div><div class="line">        &#125;</div><div class="line">        sumNum2 = sumNum2 + numbers[i];</div><div class="line">    &#125;</div><div class="line">    return (sumNum1 * 2 - sumNum2);</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main(int argc, const char * argv[]) &#123;</div><div class="line">    @autoreleasepool &#123;</div><div class="line">        int a[] = &#123;1,1,2,9,2,3,3,4,6,6,5,7,5,9,7,8,8&#125;;</div><div class="line">        int n = sizeof(a) / sizeof(a[0]);</div><div class="line">        BOOL exChangeFlag = NO;</div><div class="line">        for(int i = 0 ; i &lt; n - 1; i ++)&#123;</div><div class="line">            exChangeFlag = NO;</div><div class="line">            for(int j = 0 ; j &lt; n - 1 - i ; j ++)&#123;</div><div class="line">                if(a[j] &gt; a[j+1])&#123;</div><div class="line">                    exChangeFlag = YES;</div><div class="line">                    int temp = a[j];</div><div class="line">                    a[j] = a[j+1];</div><div class="line">                    a[j+1] = temp;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            if(exChangeFlag == NO)&#123;</div><div class="line">                printf(&quot;第%d趟提前结束\n&quot;,i);</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        printf(&quot;%d\n&quot;,FindSignle(a, n));</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[每周烧脑-004]]></title>
      <url>http://yoursite.com/2016/09/26/%E6%AF%8F%E5%91%A8%E7%83%A7%E8%84%91-004/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="重复的数字"><a href="#重复的数字" class="headerlink" title="重复的数字"></a>重复的数字</h3><p>n个连续的整数被打乱顺序放在一个数组中，其中有一个是重复的，请用最快的方法找出这个数字</p>
<h2 id="最佳答案"><a href="#最佳答案" class="headerlink" title="最佳答案"></a>最佳答案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line"></div><div class="line">## 答案</div></pre></td></tr></table></figure>
<p>```</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[每周烧脑-003]]></title>
      <url>http://yoursite.com/2016/09/26/%E6%AF%8F%E5%91%A8%E7%83%A7%E8%84%91-003/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="重复的数字"><a href="#重复的数字" class="headerlink" title="重复的数字"></a>重复的数字</h3><p>n个连续的整数被打乱顺序放在一个数组中，其中有一个是重复的，请用最快的方法找出这个数字</p>
<h2 id="最佳答案"><a href="#最佳答案" class="headerlink" title="最佳答案"></a>最佳答案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">## 答案</div></pre></td></tr></table></figure>
<p>```</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[每周烧脑-002]]></title>
      <url>http://yoursite.com/2016/09/26/%E6%AF%8F%E5%91%A8%E7%83%A7%E8%84%91-002/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="螺旋二维数组"><a href="#螺旋二维数组" class="headerlink" title="螺旋二维数组"></a>螺旋二维数组</h3><p>输入：正整数N</p>
<p>输出：N x N的二维数组，要求，数组元素从1到NxN螺旋排列，如N=5时，输出如下结果：</p>
<p>1   2   3   4  5</p>
<p>16 17 18 19  6</p>
<p>15 24 25 20  7</p>
<p>14 23 22 21  8 </p>
<p>13 12 11 10  9</p>
<h2 id="最佳答案"><a href="#最佳答案" class="headerlink" title="最佳答案"></a>最佳答案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">## 答案</div></pre></td></tr></table></figure>
<p>#import <foundation foundation.h=""></foundation></p>
<p>#define M 100</p>
<p>#define N 100<br>/<em><br> 填充方法，归纳每一行的数据规律<br> k为当前放下的数字，一边走一边放<br> 按照摆放数据的过程，逐层分别处理每圈的上下左右方的数据
 </em>/<br>int main(int argc, const char * argv[]) {</p>
<pre><code>int i, j, a[100][100]={0}, n, k = 1;
printf(&quot;please input a number n:&quot;);
while(scanf(&quot;%d&quot;, &amp;n)!=EOF){
    k = 1;
    for (i = 1; i &lt;= n / 2; ++ i){
        for (j = i; j &lt;= n - i; ++ j) /* 左侧 */
            a[i][j] = k ++;
        for (j = i; j &lt;= n - i; ++ j) /* 下方 */
            a[j][n + 1 - i] = k ++;
        for (j = n - i + 1; j &gt;= i + 1; j = j - 1) /* 右侧 */
            a[n + 1 - i][j] = k ++;
        for (j = n - i + 1; j &gt;= i + 1; j = j - 1) /* 上方 */
            a[j][i] = k ++;
    }
    if(n != 1){
        for (i = 1; i &lt;= n; ++ i){
            for (j = 1; j &lt;= n; ++ j)
                printf(&quot;%5d&quot;, a[i][j]); printf(&quot;\n&quot;);
        }
    }
    else
        printf(&quot;%5d\n&quot;,n);
    printf(&quot;please input a number n:&quot;);
}

return 0;
</code></pre><p>}</p>
<p>```</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[每周烧脑-001]]></title>
      <url>http://yoursite.com/2016/09/26/algorithm-1/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h3><p>最大值、最小值、平均值和步进值四个属性，随机生成符合下列条件的一个数:</p>
<ol>
<li>这个数字不能小于最小值</li>
<li>这个数字不能大于最大值</li>
<li>这个数字与最小值的差必须是步进的整数倍</li>
<li>当生成多个随机数后，所有这些数字的平均趋近于平均值</li>
</ol>
<h2 id="最佳答案"><a href="#最佳答案" class="headerlink" title="最佳答案"></a>最佳答案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line">#include &lt;time.h&gt;</div><div class="line">double avgrand( double min, double max, double avg, double step )</div><div class="line">&#123;</div><div class="line">    int nMin = (int)(min * 200 + 0.1);</div><div class="line">    int nStep = (int)(step * 200 + 0.1);</div><div class="line">    int nMax = ((int)(max * 200 + 0.1) - nMin) / nStep * nStep;</div><div class="line">    int nAvg = (int)(avg * 200 + 0.1) - nMin;</div><div class="line">    </div><div class="line">    int r = rand() % (nMax + 1);</div><div class="line">    if( r &lt; nAvg )</div><div class="line">        r = rand() % (nMax - nAvg) + nAvg + 1;</div><div class="line">    else if( r &gt; nAvg )</div><div class="line">        r = rand() % nAvg;</div><div class="line"></div><div class="line">    r = (r + nStep / 2) / nStep * nStep;</div><div class="line"></div><div class="line">    return (double)(r + nMin) / 200.0;</div><div class="line">&#125;</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    const int count = 10000;</div><div class="line">    double min = 5.0, max = 9.0, avg = 8.0, step = 0.2, sum = 0.0;</div><div class="line"></div><div class="line">    srand( time(NULL) );</div><div class="line">    for( int i = 0; i &lt; count; ++i )</div><div class="line">    &#123;</div><div class="line">        double r = avgrand( min, max, avg, step );</div><div class="line">        if( i &lt; 200 )</div><div class="line">        &#123;</div><div class="line">            if( i % 20 == 0 )</div><div class="line">                printf(&quot;\n&quot;);</div><div class="line">            printf(&quot;%5.2f&quot;, r);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if( r &lt; min )</div><div class="line">            printf(&quot;\ntoo small %5.2f\n&quot;, r);</div><div class="line">        else if( r &gt; max )</div><div class="line">            printf(&quot;\ntoo big %5.2f\n&quot;, r);</div><div class="line">            </div><div class="line">        sum += r;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    printf(&quot;\naverage is: %f\n&quot;, sum / count);</div><div class="line">    </div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2016/09/09/hello-world/</url>
      <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>当Node.js和Git都安装好后就可以正式安装Hexo了，终端执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install -g hexo</div></pre></td></tr></table></figure>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>终端cd到一个你选定的目录，执行hexo init命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init blog</div></pre></td></tr></table></figure>
<p>blog是你建立的文件夹名称。cd到blog文件夹下，执行如下命令，安装npm：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>执行如下命令，开启hexo服务器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s</div></pre></td></tr></table></figure>
<p>此时，浏览器中打开网址<a href="http://localhost:4000，能看到如下页面：" target="_blank" rel="external">http://localhost:4000，能看到如下页面：</a></p>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建新的文章"><a href="#创建新的文章" class="headerlink" title="创建新的文章"></a>创建新的文章</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new &quot;My New Post&quot;</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="运行本地服务"><a href="#运行本地服务" class="headerlink" title="运行本地服务"></a>运行本地服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="清除缓存文件-db-json-和已生成的静态文件-public"><a href="#清除缓存文件-db-json-和已生成的静态文件-public" class="headerlink" title="清除缓存文件 (db.json) 和已生成的静态文件 (public)"></a>清除缓存文件 (db.json) 和已生成的静态文件 (public)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div></pre></td></tr></table></figure>
<h3 id="生成缓存和静态文件"><a href="#生成缓存和静态文件" class="headerlink" title="生成缓存和静态文件"></a>生成缓存和静态文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="重新部署到服务器"><a href="#重新部署到服务器" class="headerlink" title="重新部署到服务器"></a>重新部署到服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
